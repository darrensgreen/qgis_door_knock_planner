# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
#| label: fig-workflow
#| fig-cap: "The operational planning and tracking cycle for the Door Knock Planner suite."
graph workflow {
#| label: fig-workflow
#| fig-cap: "The operational planning and tracking cycle for the Door Knock Planner suite."
library(DiagrammeR)
graph workflow {
#| label: fig-workflow
#| fig-cap: "The operational planning and tracking cycle for the Door Knock Planner suite."
library(DiagrammeR)
grViz("
digraph workflow {
layout=dot;
rankdir=TB;
# Styling
node [shape=box, style=rounded];
# Nodes
InitialData [label='Initial Address Points'];
Planner [label='Door Knock Route Planner'];
VisitPoints [label='Visit Points (Ordered)\\n(All \\'Outstanding\\')'];
Crews [label='Field Crews\\n(Update status via CSV, QField, etc.)'];
Tracker [label='Door Knock Status Tracker'];
UpdatedVisitPoints [label='Updated Visit Points\\n(Mixed statuses)'];
Filter [label='Filter Layer:\\n\"Outcome\" != \\'Completed\\''];
NewData [label='New Address Data\\n(e.g., from new flood map)'];
# Main Workflow Path
subgraph cluster_cycle {
label='Daily Update & Re-planning Cycle';
color=gray;
VisitPoints -> Crews [label='Tasking'];
Crews -> Tracker [label='Completed Field Data'];
Tracker -> UpdatedVisitPoints [label='Creates'];
UpdatedVisitPoints -> Filter [label='Apply Filter in QGIS'];
Filter -> Planner [label='Input for Next Shift'];
Planner -> VisitPoints [label='Generates New Routes'];
}
# Initial Path
InitialData -> Planner [label='First Run'];
# New Data Path
NewData -> Tracker [label='Optional Input'];
}
")
#| label: fig-workflow
#| fig-cap: "The operational planning and tracking cycle for the Door Knock Planner suite."
#| label: fig-workflow
#| fig-cap: "The operational planning and tracking cycle for the Door Knock Planner suite."
library(DiagrammeR)
grViz("
digraph workflow {
# Graph Attributes
layout = dot;
rankdir = TB;
graph [fontname = 'helvetica'];
node [fontname = 'helvetica', shape = box, style = rounded];
edge [fontname = 'helvetica'];
# --- NODES ---
# Data Input Nodes
node [shape = cylinder, style = filled, fillcolor = lightblue];
Crews [label = 'Field Crew Data\\n(CSV, QField, etc.)'];
NewData [label = 'New Address Data\\n(e.g., updated flood map)'];
# Processing Nodes
node [shape = box, style = 'rounded,filled', fillcolor = lightyellow];
Tracker [label = 'Run: Door Knock Status Tracker'];
Planner [label = 'Run: Door Knock Route Planner'];
# Data State Nodes
node [shape = folder, style = filled, fillcolor = lightgrey];
UpdatedVisitPoints [label = 'Updated Visit Points Layer\\n(Master list with mixed statuses)'];
FilteredData [label = 'Filtered Layer in QGIS\\n(Shows only un-actioned points)'];
# User Action Node
node [shape = invhouse, style = filled, fillcolor = lightgreen];
UserFilter [label = 'User Action in QGIS:\\nFilter for \"Outcome\" != \\'Completed\\''];
# Output Node
node [shape = note, style = filled, fillcolor = whitesmoke];
NewRoutes [label = 'New Routes & Visit Lists\\n(For next shift)'];
# --- EDGES (Workflow) ---
# Data Consolidation Path
subgraph cluster_data_input {
label = '1. Data Consolidation';
style = filled;
color = lightcyan;
Crews -> Tracker;
NewData -> Tracker [label = 'Optional Input'];
Tracker -> UpdatedVisitPoints [label = 'Generates or Updates'];
}
# Re-planning Path
subgraph cluster_replan {
label = '2. Re-Planning for Next Shift';
style = filled;
color = 'moccasin';
UpdatedVisitPoints -> UserFilter;
UserFilter -> FilteredData [style=dashed, label='Creates a view'];
FilteredData -> Planner [label = 'Use as Address Points input'];
Planner -> NewRoutes;
}
}
")
#| label: fig-workflow
#| fig-cap: "The operational planning and tracking cycle for the Door Knock Planner suite."
library(DiagrammeR)
grViz("
digraph workflow {
# Graph Attributes
layout = dot;
rankdir = TB;
graph [fontname = 'helvetica'];
node [fontname = 'helvetica', shape = box, style = rounded];
edge [fontname = 'helvetica'];
# --- NODES ---
# Data Input Nodes
node [shape = cylinder, style = filled, fillcolor = lightblue];
Crews [label = 'Field Crew Data\\n(CSV, QField, etc.)'];
NewData [label = 'New Address Data\\n(e.g., updated flood map)'];
# Processing Nodes
node [shape = box, style = 'rounded,filled', fillcolor = lightyellow];
Tracker [label = 'Run: Door Knock Status Tracker'];
Planner [label = 'Run: Door Knock Route Planner'];
# Data State Nodes
node [shape = folder, style = filled, fillcolor = lightgrey];
UpdatedVisitPoints [label = 'Updated Visit Points Layer\\n(Master list with mixed statuses)'];
FilteredData [label = 'Filtered Layer in QGIS\\n(Shows only un-actioned points)'];
# User Action Node
node [shape = invhouse, style = filled, fillcolor = lightgreen];
# This label is now fixed to use proper quote escaping
UserFilter [label = 'User Action in QGIS:\\nFilter for \\"Outcome\\" != \\'Completed\\''];
#| label: fig-workflow
#| fig-cap: "The operational planning and tracking cycle for the Door Knock Planner suite."
library(DiagrammeR)
grViz("
digraph workflow {
# Graph Attributes
layout = dot;
rankdir = TB;
graph [fontname = 'helvetica'];
node [fontname = 'helvetica', shape = box, style = rounded];
edge [fontname = 'helvetica'];
# --- NODES ---
# Data Input Nodes
node [shape = cylinder, style = filled, fillcolor = lightblue];
Crews [label = 'Field Crew Data\\n(CSV, QField, etc.)'];
NewData [label = 'New Address Data\\n(e.g., updated flood map)'];
# Processing Nodes
node [shape = box, style = 'rounded,filled', fillcolor = lightyellow];
Tracker [label = 'Run: Door Knock Status Tracker'];
Planner [label = 'Run: Door Knock Route Planner'];
# Data State Nodes
node [shape = folder, style = filled, fillcolor = lightgrey];
UpdatedVisitPoints [label = 'Updated Visit Points Layer\\n(Master list with mixed statuses)'];
FilteredData [label = 'Filtered Layer in QGIS\\n(Shows only un-actioned points)'];
# User Action Node
node [shape = invhouse, style = filled, fillcolor = lightgreen];
# --- THIS LABEL IS NOW SIMPLIFIED TO PREVENT ERRORS ---
UserFilter [label = 'User Action in QGIS:\\nFilter layer to show incomplete tasks'];
# Output Node
node [shape = note, style = filled, fillcolor = whitesmoke];
NewRoutes [label = 'New Routes & Visit Lists\\n(For next shift)'];
# --- EDGES (Workflow) ---
# Data Consolidation Path
subgraph cluster_data_input {
label = '1. Data Consolidation';
style = filled;
color = lightcyan;
Crews -> Tracker;
NewData -> Tracker [label = 'Optional Input'];
Tracker -> UpdatedVisitPoints [label = 'Generates or Updates'];
}
# Re-planning Path
subgraph cluster_replan {
label = '2. Re-Planning for Next Shift';
style = filled;
color = 'moccasin';
UpdatedVisitPoints -> UserFilter;
UserFilter -> FilteredData [style='dashed', label='Creates a view'];
FilteredData -> Planner [label = 'Use as Address Points input'];
Planner -> NewRoutes;
}
}
")
#| label: fig-workflow
#| fig-cap: "The operational planning and tracking cycle for the Door Knock Planner suite."
library(DiagrammeR)
grViz("
digraph workflow {
# --- GRAPH ATTRIBUTES ---
layout = dot;
rankdir = TB;
graph [fontname = 'helvetica', splines=ortho]; # Ortho lines look cleaner for this flow
node [fontname = 'helvetica', shape = box, style = 'rounded,filled'];
edge [fontname = 'helvetica'];
# --- NODES ---
# Using different fill colors for different types of items
# Data Sources / Outputs
node [fillcolor = whitesmoke, style='rounded,filled'];
InitialData [label = 'New Address Data\\n(e.g., from new flood map, SAR area)'];
VisitPoints [label = 'Visit Points & Routes'];
UpdatedVisitPoints [label = 'Updated Visit Points Layer\\n(Master list with mixed statuses)'];
# Tools
node [fillcolor = lightyellow];
Planner [label = 'Run: Door Knock Route Planner'];
Tracker [label = 'Run: Door Knock Status Tracker'];
# Actors / Manual Steps
node [fillcolor = lightgreen];
Crews [label = 'Field Crews Collect Data\\n(via CSV, QField, etc.)'];
UserFilter [label = 'User Action in QGIS:\\nFilter for incomplete tasks'];
# --- WORKFLOW & LAYOUT ---
# Cluster for the first part of the operation
subgraph cluster_01_planning {
label = '1. Initial Planning & Field Tasking';
style = filled;
fillcolor = 'lightblue';
InitialData -> Planner [label = 'First Run Input'];
Planner -> VisitPoints;
VisitPoints -> Crews [label = 'Tasking'];
}
# Cluster for the update and re-planning cycle
subgraph cluster_02_update {
label = '2. Status Tracking & Re-Planning Cycle';
style = filled;
fillcolor = 'moccasin';
Crews -> Tracker [label = 'Completed Field Data'];
Tracker -> UpdatedVisitPoints;
UpdatedVisitPoints -> UserFilter;
}
# This edge creates the crucial loop back to the start of the process
UserFilter -> Planner [label = 'Input for Next Shift', lhead = cluster_01_planning];
}
")
grViz("
digraph workflow {
# --- GRAPH ATTRIBUTES ---
layout = dot;
rankdir = TB;
graph [fontname = 'helvetica', splines=ortho]; # Ortho lines look cleaner for this flow
node [fontname = 'helvetica', shape = box, style = 'rounded,filled'];
edge [fontname = 'helvetica'];
# --- NODES ---
# Using different fill colors for different types of items
# Data Sources / Outputs
node [fillcolor = whitesmoke, style='rounded,filled'];
InitialData [label = 'New Address Data\\n(e.g., from new flood map, SAR area)'];
VisitPoints [label = 'Visit Points & Routes'];
UpdatedVisitPoints [label = 'Updated Visit Points Layer\\n(Master list with mixed statuses)'];
# Tools
node [fillcolor = lightyellow];
Planner [label = 'Run: Door Knock Route Planner'];
Tracker [label = 'Run: Door Knock Status Tracker'];
# Actors / Manual Steps
node [fillcolor = lightgreen];
Crews [label = 'Field Crews Collect Data\\n(via CSV, QField, etc.)'];
UserFilter [label = 'User Action in QGIS:\\nFilter for incomplete tasks'];
# --- WORKFLOW & LAYOUT ---
# Cluster for the first part of the operation
subgraph cluster_01_planning {
label = '1. Initial Planning & Field Tasking';
style = filled;
fillcolor = 'lightblue';
InitialData -> Planner [label = 'First Run Input'];
Planner -> VisitPoints;
VisitPoints -> Crews [label = 'Tasking'];
}
# Cluster for the update and re-planning cycle
subgraph cluster_02_update {
label = '2. Status Tracking & Re-Planning Cycle';
style = filled;
fillcolor = 'moccasin';
Crews -> Tracker [label = 'Completed Field Data'];
Tracker -> UpdatedVisitPoints;
UpdatedVisitPoints -> UserFilter;
}
# This edge creates the crucial loop back to the start of the process
UserFilter -> Planner [label = 'Input for Next Shift', lhead = cluster_01_planning];
}
")
